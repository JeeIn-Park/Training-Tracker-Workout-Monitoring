package com.example.trainingtracker

fun main() {
    // Function to handle "login" events with different types of data
    val handleLoginEvent = { event: Event ->
        println("Handling login event")
        when (event.data) {
            is String -> println("Login data (String): ${event.data}")
            is Int -> println("Login data (Int), possibly user ID: ${event.data}")
            is User -> println("Login data (User object), user name: ${event.data.name}")
            null -> println("No data provided with login event.")
            else -> println("Unhandled type of data: ${event.data}")
        }
    }

    // Subscribe to the "login" event
    EventManager.subscribe("login", handleLoginEvent)

    // Publish a "login" event with String data
    EventManager.publish(Event("login", "user123 logged in"))

    // Publish a "login" event with Int data
    EventManager.publish(Event("login", 42))

    // Assuming a User data class exists
    val user = User("John Doe")
    // Publish a "login" event with User object
    EventManager.publish(Event("login", user))

    // Unsubscribe to clean up or stop receiving events
    EventManager.unsubscribe("login", handleLoginEvent)
}

// Assuming EventManager is defined in another file as provided earlier

// User data class for demonstration
data class User(val name: String)
