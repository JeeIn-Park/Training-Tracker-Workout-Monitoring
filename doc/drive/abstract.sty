abstract

background

textview
EditText
cardview
graphview


version 2
survey
excel
motivation and planning


version 3


evaluation
based on properties selected on mvp
version 2 feedback
version 3 feedback
shows enhancement 





















\section{Muscle Physiology and Its Role in Enhancing Fitness Tracking Technologies}

In this software development project, an in-depth understanding of muscle physiology transcends theoretical knowledgeâ€”it becomes a practical tool for designing an advanced fitness app. This app aims to go beyond mere activity tracking; it seeks to elevate user engagement and optimize training outcomes through scientifically backed recommendations. These recommendations will inform workout frequency, intensity, recovery periods, and strength benchmarks, providing a personalized and safe training regimen for users. By integrating physiological principles, the app will not only serve as a sophisticated tracking tool but also as an educational platform that enhances physical well-being and promotes informed exercise choices, setting it apart from simpler market alternatives.



\subsection{One-Rep Max (1RM)}

Furthermore, the one-rep max (1RM) is a critical metric in strength training, representing the maximum weight an individual can lift in a single repetition for a given exercise. It is a valuable index for setting benchmarks and measuring strength gains over time. Incorporating 1RM calculations into the app provides users with a quantitative tool to set realistic goals and track their progress in strength training, enhancing both motivation and the personalisation of training programs.



A layout defines the structure for a user interface in your app, such as in an activity. All elements in the layout are constructed using a hierarchy of View and ViewGroup objects. A View typically renders something visible and interactive to the user. A ViewGroup acts as an unseen container, outlining the layout structure for View and other ViewGroup objects.

You can define a layout in two manners:

Declare UI elements in XML. Android offers a simple XML vocabulary corresponding to the View classes and subclasses, encompassing widgets and layouts. Alternatively, you can utilize Android Studio's Layout Editor to construct your XML layout through a drag-and-drop interface.
Instantiate layout elements during runtime. Your app can generate View and ViewGroup objects and programmatically manipulate their attributes.
Declaring your UI in XML allows for the segregation of your app's presentation from the code governing its functionality. Utilizing XML files also facilitates the provision of distinct layouts tailored for varying screen sizes and orientations, as elaborated further in the Support different screen sizes section.

The Android framework affords the flexibility to employ either or both of these methods in crafting your app's UI. For instance, you can define your app's default layouts in XML and subsequently adjust the layout during runtime.
