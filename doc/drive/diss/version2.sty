\section{Advancing User Engagement: Iterative Design and Enhanced Functionality in Version 2 of TrainingTracker(TT)}

It involves the implementation of version 1.5 and version 2.0. In the version 1.5 implementation, enhancing the user interface (UI) design to improve the user experience was a primary focus, setting the stage for the integration of upcoming features planned for version 2.0. During the version 1.5 implementation phase, I retained the features from version 1.0 (MVP) and enhanced the aesthetics. In the version 2.0 implementation, I added new functionalities, considering app scalability and maintainability alongside.

\subsection{version 2 planning}
Before actually working on the version 1.5 and version 2.0 implementations, I made a detailed plan for the new features to be implemented. Using PowerPoint, I visually created a detailed plan. The meticulous attention to UI design details not only reinforces the brand identity but also significantly enhances the user interface, making it more engaging and accessible to all users. Central to this phase was the strategic selection of a yellow and blue colour palette to accommodate users with red/green colour blindness, demonstrating a solid understanding of accessibility principles in UI design.

\begin{figure}[h]
    \centering
    \begin{minipage}[t]{0.3\textwidth}
        \centering
        \includegraphics[width=\textwidth]{figures/Ver2PlanHome.png}
        \caption{Visualised plan of HomeFragment version 2 generated using Microsoft PowerPoint.}
        \label{fig:Ver2PlanHome}
    \end{minipage}\hfill
    \begin{minipage}[t]{0.3\textwidth}
        \centering
        \includegraphics[width=\textwidth]{figures/Ver2PlanAddLog.png}
        \caption{Visualised plan of AddLogActivity version 2 generated using Microsoft PowerPoint. Users will be able to access this activity by clicking on an exercise on the HomeFragment.}
        \label{fig:Ver2PlanAddLog}
    \end{minipage}\hfill
    \begin{minipage}[t]{0.3\textwidth}
        \centering
        \includegraphics[width=\textwidth]{figures/Ver2PlanStatus.png} 
        \caption{Visualised plan of StatusFragment version 2 generated using Microsoft PowerPoint.}
        \label{fig:Ver2PlanStatus}
    \end{minipage}
\end{figure}




\subsubsection{Muscle Status Visualization for Improved Workout Management and Recovery Tracking}

The muscle visualisation feature significantly enhances user interaction and management of workout progress for each muscle group. The application offers a visual representation of muscle status, indicating whether a muscle is fully recovered, in recovery, or has been inactive for an extended period. Each state is distinctly coloured, enabling users to quickly ascertain the status of their muscles at a glance. This holistic approach not only enriches user engagement with the app by providing clear visual cues and updates but also augments the functionality and accuracy of workout tracking.


\subsubsection{Enhancing User Customisation and Exercise Management through Efficient Tagging and Advanced Filtering Mechanisms}
To enhance user customisation and improve the filtering capabilities of my Android application, I added a tagging feature that allows users to create and manage custom categories. Users will be able to add tags based on their preferences, enabling them to customise routines and group specific exercises according to muscle groups or other criteria.

Tag bars will be integrated into the home fragment and status fragment to support filtering. The last element on the tag bar will always provide a consistent location for users to add new tags. The tag bar will display all user-added tags, enabling efficient tag management and selection.


\subsubsection{Workout Analysis with 1RM Tracking for Comprehensive Insights and Improved User Engagement}
To enhance workout analysis capabilities, the app will provide users with meaningful insights into their exercise progress. This improvement centres around the integration of a one-repetition maximum (1RM) calculation across various components of the app, enabling users to track strength gains over time. These enhancements not only streamline the user experience by integrating critical performance data directly where it's most relevant but also encourage ongoing engagement by continuously highlighting progress and achievements directly within the workout logs and home screen displays.

Workout analysis will be prominently accessible via the status fragment, where users can view all exercise logs along with corresponding analyses on one consolidated screen. Below each exercise card—detailing the exercise—the personal best 1RM and a graph illustrating the progress will be displayed. This section will also highlight the date the personal best was achieved, encouraging users to continue striving for new records. Additionally, all the original exercise logs will be presented in a tabular format below this analysis for a detailed review.

Notably, analysis features will also be integrated into the logging screen. This unique aspect of the app ensures that users do not need to navigate away to separate screens to view their performance analytics; instead, relevant logs and analyses are automatically presented as they enter their workout records. A simpler version of the 1RM analysis will also be available on the home screen, providing quick glimpses of personal bests and the dates they were achieved, similar to the status fragment but optimised for at-a-glance viewing.

Given the shift of workout analysis to the status screen, I relocated the functionality to add custom exercise cards, which was initially part of the status fragment, to the home screen. To facilitate this transition smoothly, I introduced a floating action button on the home fragment.

\begin{figure}[h]
    \centering
    \begin{minipage}[t]{0.45\textwidth}
        \centering
        \includegraphics[width=\textwidth]{figures/Ver2PlanAddCard.png} 
        \caption{Visualised plan of AddVardActivity version 2 generated using Microsoft PowerPoint. Users will be able to access this activity by clicking on the floating action button on the HomeFragment.}
        \label{fig:Ver2PlanAddCard}
    \end{minipage}\hfill
    \begin{minipage}[t]{0.45\textwidth}
        \centering
        \includegraphics[width=\textwidth]{figures/Ver2PlanSetting.png} 
        \caption{Visualised plan of SettingFragment version 2 generated using Microsoft PowerPoint.}
        \label{fig:Ver2PlanSetting}
    \end{minipage}
\end{figure}

\subsubsection{Facilitating Direct User Interaction and Optimised Feedback Integration with Communication Tools}

I introduced a new settings screen designed to enhance the user experience by facilitating direct communication between users and the development team. This update includes the addition of three crucial buttons: 'Report Error', 'Send Feedback', and 'Privacy Policy'. These new features transform the settings fragment into a hub for user interaction, allowing users to play an active role in the app’s development and improvement, which in turn increases the app's accessibility and user satisfaction. By incorporating these settings and functionalities, the app will not only become more aligned with user needs but also adhere to best practices for data management and user privacy. This setup ensures users are well-informed about how their data is used and provides them with straightforward mechanisms to contribute to the app’s ongoing development, thus fostering a sense of community and co-creation.

In addition to these communication tools, I included a 'Privacy Policy' button to clarify how user data is handled, especially in scenarios where users report errors. This policy will explain that the app may collect diagnostic information from the local data stored on the user’s device to better understand the context of any issues reported. This can help identify if problems arise from data loading failures, allowing for more targeted troubleshooting.
% -----------------------------------------------------------------------------

\subsection{Enhancing User Experience Through UI Design in Version 1.5}


\subsubsection{Optimising Visual Consistency and Branding}
The method of defining this colour scheme in the `colors.xml` file and consistently applying these colours throughout the app using `themes.xml` is correct and aligns with best practices in Android development. This ensures maintainability and uniformity of the UI design, creating a cohesive appearance across various UI elements such as buttons and the bottom navigation bar, thereby enhancing the overall aesthetic appeal of the app.

Additionally, adopting scalable vector graphics (SVG) for the app logo supports visual consistency and branding. Utilising SVGs, which are resolution-independent and scale without losing quality, is effective for maintaining sharp visuals across different device resolutions. The use of Inkscape for creating these SVGs, although a detail typically outside the immediate scope of software versioning, underscores a technically sound approach to asset creation.


\subsubsection{Improvements in Home and Status Fragments}

In the development of version 1.5 of the application, significant improvements were made to both the Home and Status fragments to enhance usability and aesthetics. Initially, the app used individual log buttons within each RecyclerView item to access the add log activity, which cluttered the interface and detracted from user convenience. To address this, I removed these buttons, making each element in the RecyclerView clickable itself, thereby streamlining the process where users can initiate an add log activity by simply selecting the desired exercise.

Simultaneously, to reduce redundancy and improve the user experience on the Status screen, I eliminated the "delete" buttons. Instead, users can now delete an exercise by long-pressing on an item and selecting the delete option from a context menu. This change was mirrored in the Home fragment to maintain consistency across the user interface.

Additionally, design enhancements were implemented to the RecyclerView elements to increase clarity and usability. Each element was styled using a card layout, creating visual separation and helping users recognise each item as distinct. This was further enhanced by managing the visibility of certain elements to avoid displaying extraneous information, focusing user attention on essential details, formatted for clear understanding.

A new feature in the card layout includes a field for personal records, setting the stage for future functionality that will leverage these data points. I also customised the scrollbar within the RecyclerView to reflect the application's consistent colour scheme, aiding users in visually tracking their position within the list and the number of items displayed.

To further prepare for upcoming features, I added a tag bar above the RecyclerView for future functional expansion and designed visualised muscle groups displayed above this bar. These were created as drawable vector paths using Inkscape, based on research into commonly exercised muscle groups. This preparation involved sketching the muscle groups, categorising them, and then digitally rendering them into vectors, ensuring that each graphic was scalable and visually cohesive with the overall design of the application. These enhancements not only improve current functionality but also lay the groundwork for more sophisticated features in subsequent releases.


\subsubsection{Redesigning the Add Log Activity}

In version 1.5 of our application, the Add Log Activity underwent significant redesigns to optimise the limited screen space and enhance user navigation based on insights gained from personal testing of the app. Recognising the need for a more intuitive logging experience, I implemented the display of the exercise name on the action bar during log entries. This constant visual cue helps ensure users remain oriented and reassures them that their inputs are being recorded under the correct exercise category, minimising confusion and errors. These improvements, driven by direct observation and hands-on testing, not only enhance the app’s functionality but also significantly refine the user experience by making the workout logging process more intuitive and efficient.

The application adeptly manages screen space through a RecyclerView combined with dynamic space allocation. This design maximises the use of available screen space effectively. The RecyclerView is utilised to display a table of logs, allowing for easy access to past entries. Even if all logs do not fit on the screen simultaneously, users can scroll to view any previous logs. Initially, the screen predominantly displays past logs; however, as new logs are entered, the system dynamically adjusts to increase the space allocated to the current session's data. As more logs are added, the space dedicated to displaying past logs gradually decreases, making room for the new logs being entered. To optimise the display of current logs, I used 'wrap\_content' for the height of the new logs section and placed the RecyclerView for the remaining page. 

Anticipating future enhancements, I prepared the layout to include analysis displays featuring CardViews for summarised data and GraphViews to chart exercise progress. This setup is intended to provide easy and intuitive access to analytical insights without leaving the logging screen.

I identified the inconvenience of needing to switch between screens to view past performances while entering new data. To address this, I integrated past logs directly on the logging screen. Displayed in a table format, these logs only show entries corresponding to the exercise currently being logged, employing two distinct row layouts to separate date information from exercise details such as set count, weight lifted, and reps completed. This design enhances clarity and allows for effective organisation of data. 

To further customise the logging experience, I implemented an option to omit the set count for each entry, catering to different workout preferences such as warm-up sets or varied-weight sets within the same exercise. This flexibility supports more personalised logging and better reflects the diversity of real-world workout routines. Upon completion of a logging session, the data is automatically saved to local storage on the phone. 

Significant updates to the data model were also introduced to improve logical consistency and efficiency. When users engage in exercise, each session involves multiple sets. Additionally, each set consists of weight lifted, reps completed, and a predicted one-repetition maximum (1RM) calculated from the weight lifted and reps completed that users input. I implemented the ExerciseSet data class reflecting this real-world data structure. For the 1RM calculation, a one rep max algorithm is implemented. To enhance the accuracy of this calculation, I employed four different algorithms to calculate the 1RM and then calculated the average value, thus employing a structure that mirrors real-world workout routines.

Alongside this, The class for each session, namely ExerciseLog, is updated to contain a set of sets completed during the workout. The 'lastActivity' attribute in this class became nullable. In version 1, this attribute automatically updated the last activity to the date the exercise was created. However, this doesn't logically make sense because entering a new kind of exercise doesn't necessarily mean the exercise was actually performed. For this reason, to handle cases where there may not be a date of last activity, this attribute has been changed to a nullable attribute. This attribute is only updated when users are actually entering the logs for that exercise. This modification was made to better track the last activity a user entered. Additionally, to optimise data management, each ExerciseLog now references the corresponding ExerciseCard by its unique UUID, streamlining the storage process by avoiding redundancy and enhancing data retrieval.

\subsubsection{Enhancing Functionality and Maintainability: Layout Modifications in the Settings Fragment}
The Settings Fragment underwent several layout modifications to enhance both its functionality and organisation. These adjustments not only ready the application for the integration of additional features but also improve the overall clarity and efficiency of the user interface design. Specifically, the textView that displays the app version was relocated to the bottom of the screen. This change was implemented to free up space at the top of the layout, creating room for the addition of new buttons that will accommodate future functionalities.

To further streamline the layout and enhance maintainability, I introduced a new system for renaming layouts within the XML files. This system utilises a standardised naming convention that amalgamates the layout name with the content and view type it contains, structured as `LayoutName\_Contents\&ViewType`. This methodology significantly clarifies the structure of the layout files, facilitating easier understanding and management. By distinctly delineating what each layout section represents and its purpose, it reduces ambiguity during the data binding process to the views, enabling a more intuitive development process and expediting future updates or modifications.
% -----------------------------------------------------------------------------



\subsection{Version 2 Implementation: Enhancing Functionality, Scalability, and Maintainability}


\subsubsection{Enhancing Scalability and Maintainability through Centralised Formatting and Structured Data Management}

In the development of my Android application using Kotlin, significant emphasis was placed on enhancing both the scalability and maintainability of the software to ensure efficient performance and ease of future updates. These improvements demonstrate not only technical proficiency in Android development and Kotlin programming but also a strategic approach to software architecture. The use of design patterns such as the factory pattern for data management and centralised control for string formatting are indicative of advanced programming skills and a commitment to creating scalable, maintainable, and robust software applications.

A major advancement in this regard was the introduction of a centralised string formatting mechanism. This mechanism, encapsulated within a class called `FormattedStringGetter`, is crucial for maintaining consistency across the app's user interface. It provides a unified approach to converting data into strings, allowing for uniform presentation and simplification of modifications. By centralising string formatting, any required changes to the data presentation can now be managed in one location, rather than across multiple classes, enhancing the maintainability and reducing the potential for inconsistencies.

Moreover, I significantly improved data management by employing the factory design pattern, a decision that streamlined the instantiation process of data objects throughout the application. This architecture involves factories that are designated to create objects based on predefined data classes. These factories not only enforce a consistent creation process but also simplify the handling of special data cases. By centralising object creation, updates to data classes or their instantiation logic are confined to a single point of modification, thereby increasing the flexibility and scalability of the application.

To further bolster the robustness of the application, I enhanced the data storage and error handling mechanisms. By making the data storage methods private and employing detailed exception handling strategies, the application ensures data integrity and enhances security. These methods are designed to gracefully manage exceptions, providing reliable fallback mechanisms to maintain the application's functionality. This careful management of exceptions and data integrity checks are indicative of high programming standards and a deep understanding of software reliability and user data protection.


\subsubsection{Muscle Status Visualization for Improved Workout Management and Recovery Tracking}
To efficiently manage this feature, I introduced a 'Muscle' class, which acts as a bridge between the muscle vector graphics and the associated muscle status data. This class is instrumental in dynamically updating the displayed colours of the muscle graphics based on their current status. It accomplishes this by comparing the saved muscle data—including names and statuses—with the drawable assets' file names, enabling the app to accurately display the appropriate muscle status for each group. If no data is loaded, the system initialises with default values, setting the 'lastActivity' attribute to null and the initial status to fully recovered, as this process occurs when the user runs the app for the first time, indicating that no workouts have been recorded yet.

The app determines muscle status by comparing the 'lastActivity' timestamp in the muscle data with the current time. Upon each app launch, it refreshes the muscle states by checking the current time and applying a logical algorithm to ascertain the muscle's condition. If 'lastActivity' is null (indicating the app is run for the first time), it assigns the current time for further muscle status tracking. If a muscle has not been exercised for more than ten days, the system flags it as needing exercise; if it has been worked out within the last two days, it indicates that the muscle is in recovery. If none of these conditions apply, the muscle is considered fully recovered. Following this update, the status within the muscle data class is adjusted, and the system then links the updated status to the appropriate drawable resource for visual representation.

To further tailor the user experience, the application includes a feature allowing users to customise exercises with any number of associated muscle groups. This customisation is facilitated by a spinner that can select multiple items, ensuring users can specify both main and sub-muscle groups for each exercise log. When an exercise log is entered, the application checks the associated muscle groups and updates their status to 'being recovered', and updates the lastActivity.

\subsubsection{Enhancing User Customisation and Exercise Management through Efficient Tagging and Advanced Filtering Mechanisms}
The initial attempt to implement this feature involved using strings to represent each tag. However, this approach led to several issues, such as the inability to create tags with identical names and difficulties in managing tag properties like colour changes based on their selection status. To address these issues, I developed a more robust solution in my second implementation attempt.

In this version, I designed a dedicated `Tag` data class to provide a clear structure for tag management. Each tag consists of a unique ID, the time it was added, a name, and a boolean value (`isSelected`) indicating whether the tag is selected. This structure enables better handling of tags, ensuring that each tag is distinct and manageable. Additionally, `ADD\_TAG` and `SELECT\_TAG` were added as companion objects within this class to facilitate tag customisation and selection.

The `ADD\_TAG` functionality allows users to add new tags by clicking on the `ADD\_TAG` icon on the tag bar, which is implemented using a horizontal `RecyclerView`. 

The filtering mechanism works by retrieving selected tags from local storage and then filtering exercise cards based on these tags. If a card contains any of the selected tags, it is displayed; otherwise, it is hidden. When no tags are selected, the filter is disabled, and all exercises are shown. The selected tags persist throughout the main activity's lifecycle, ensuring that users do not need to reselect tags when navigating between fragments. This persistence enhances the user experience by maintaining filter settings across the home and status fragments, allowing seamless transitions without losing tag selections.

Tags can be assigned to exercise cards when users add exercises. The `SELECT\_TAG` companion object is used to display a spinner hint, making it the first tag shown in the spinner. Users can select multiple tags using a multi-select spinner, enabling them to assign numerous tags to an exercise as needed. 



\subsubsection{Workout Analysis with 1RM Tracking for Comprehensive Insights and Improved User Engagement}
To facilitate this, I first updated our data structure by adding a `oneRepMax` attribute to the `ExerciseSet` class. Each time a user logs an exercise set, the app automatically calculates the 1RM for that set and assigns it to this new attribute. This calculation is foundational for tracking the maximum strength output across individual sessions. Next, I introduced a `oneRepMax` attribute to the `ExerciseLog` class. After a user completes logging an exercise, the app compares all the 1RM values from the sets entered during that session and records the highest value. This maximum 1RM value per session is crucial as it allows users to see how their strength has evolved from session to session.

Furthermore, I enhanced the `ExerciseCard` class by also integrating the `oneRepMax` attribute. Whenever a new exercise log is saved, the app checks if the 1RM from this log exceeds the current maximum recorded on the corresponding ExerciseCard. If so, it updates the card's 1RM. This feature not only tracks personal bests but also serves as a motivational tool by showcasing users' strength improvements over time.

Initially fixed, I later made this button draggable to optimise screen space usage and minimise obstruction of content. When not actively used, the button becomes semi-transparent and automatically aligns to the screen's edges, thus reducing visual distraction and maximising the available display area for exercise cards.


\subsubsection{Facilitating Direct User Interaction and Optimised Feedback Integration with Communication Tools}

The 'Report Error' and 'Send Feedback' functions are designed to allow users to communicate directly with the development team via email. For this purpose, I set up a specific email account dedicated to the app (trainingtrackermainbox@gmail.com). When users choose to report an error or send feedback, they can fill out their message directly within the app and send it by email. Implementing this required the app to access the internet, which necessitated adding specific permissions to the app's manifest file. The permission `android.permission.INTERNET` is essential to enable the app to open internet connections for sending emails, ensuring that the feedback process is smooth and effective.